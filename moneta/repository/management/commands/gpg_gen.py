# -*- coding=utf-8 -*-
from argparse import ArgumentParser

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError
from moneta.repository.signing import GPG

__author__ = 'flanker'

if settings.ADMINS and len(settings.ADMINS[0]) == 2:
    default_email = settings.ADMINS[0][1]
else:
    default_email = 'moneta@19pouces.net'


class Command(BaseCommand):
    args = '<generate|show|export>'
    help = """command=generate: Create a new GPG key
    command=show: Show existing GPG keys
    command=export: export GPG key"""

    def add_arguments(self, parser):
        assert isinstance(parser, ArgumentParser)
        parser.add_argument('gpg_command', action='store', default=None, help='generate|show|export'),
        parser.add_argument('--type', action='store', default='RSA', help='Key type (RSA or DSA).'),
        parser.add_argument('--length', action='store', default='2048', help='Key length (default 2048).'),
        parser.add_argument('--name', action='store', default='Moneta GNUPG key', help='Name of the key'),
        parser.add_argument('--comment', action='store', default='Generated by gnupg.py',
                            help='Comment to add to the generated key.'),
        parser.add_argument('--email', action='store', default=default_email, help='Email address for the user.'),
        parser.add_argument('--years', action='store', default='10y',
                            help='Expiration date, in number of years (like "10y") or days (like "10d").'),
        parser.add_argument('--absent', action='store_true',
                            default=False, help='Generate keys only when no key already exists.'),
        parser.add_argument('--onlyid', action='store_true', default=False,
                            help='Generate keys only when no key already exists.'),

    def handle(self, *args, **options):
        command = options['gpg_command']
        if command not in ('generate', 'show', 'export'):
            raise CommandError('Usage: gpg_gen <generate|show|export>')
        if command == 'generate':
            if options['absent'] and len(GPG.list_keys(False)) > 0:
                return
            input_data = GPG.gen_key_input(key_type=options['type'], key_length=int(options['length']),
                                           name_real=options['name'], name_comment=options['comment'],
                                           name_email=options['email'],
                                           expire_date=options['years'])
            key = GPG.gen_key(input_data)
            print("Fingerprint", key)
        elif command == 'show':
            if options['onlyid']:
                for key in GPG.list_keys(False):
                    print("{keyid}".format(**key))
            else:
                print("Available keys:")
                for key in GPG.list_keys(False):
                    print("id (GNUPG_KEYID) : {keyid}, longueur : {length}, empreinte : {fingerprint}".format(**key))
        elif command == 'export':
            print(GPG.export_keys(settings.GNUPG_KEYID))